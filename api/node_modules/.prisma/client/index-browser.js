
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.24.1
 * Query Engine version: 18095475d5ee64536e2f93995e48ad800737a9e4
 */
Prisma.prismaVersion = {
  client: "2.24.1",
  engine: "18095475d5ee64536e2f93995e48ad800737a9e4"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ClienteScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  telefono: 'telefono',
  direccion: 'direccion'
});

exports.Prisma.EventosScalarFieldEnum = makeEnum({
  id: 'id',
  fecha: 'fecha',
  hora: 'hora',
  total: 'total',
  idpaquete: 'idpaquete',
  idcliente: 'idcliente',
  celebracion: 'celebracion',
  pagado: 'pagado'
});

exports.Prisma.PaqueteScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  adultos: 'adultos',
  ninios: 'ninios',
  precio: 'precio',
  preciounitario: 'preciounitario'
});

exports.Prisma.PaqueteeventoScalarFieldEnum = makeEnum({
  id: 'id',
  adultos: 'adultos',
  ninios: 'ninios',
  total: 'total',
  idpaquete: 'idpaquete'
});

exports.Prisma.AbonoScalarFieldEnum = makeEnum({
  id: 'id',
  fecha: 'fecha',
  cantidad: 'cantidad',
  idcliente: 'idcliente',
  idpagos: 'idpagos'
});

exports.Prisma.EmpleadosScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  direccion: 'direccion',
  telefono: 'telefono',
  descripcion: 'descripcion',
  idrol: 'idrol'
});

exports.Prisma.GastofijoScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  total: 'total',
  activo: 'activo',
  idmes: 'idmes'
});

exports.Prisma.GastoseventosScalarFieldEnum = makeEnum({
  id: 'id',
  monto: 'monto',
  motivo: 'motivo',
  descripcion: 'descripcion',
  idmes: 'idmes',
  idevento: 'idevento'
});

exports.Prisma.MesScalarFieldEnum = makeEnum({
  id: 'id',
  mes: 'mes',
  gastos: 'gastos',
  ganancias: 'ganancias'
});

exports.Prisma.PagosScalarFieldEnum = makeEnum({
  id: 'id',
  restante: 'restante',
  pagado: 'pagado',
  total: 'total',
  fechalimite: 'fechalimite',
  idevento: 'idevento'
});

exports.Prisma.RolScalarFieldEnum = makeEnum({
  id: 'id',
  rol: 'rol'
});

exports.Prisma.ServiciosScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  precio: 'precio',
  descripcion: 'descripcion'
});

exports.Prisma.ServicioseventosScalarFieldEnum = makeEnum({
  id: 'id',
  idevento: 'idevento',
  idservicio: 'idservicio',
  idempleado: 'idempleado',
  precio: 'precio'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  cliente: 'cliente',
  eventos: 'eventos',
  paquete: 'paquete',
  paqueteevento: 'paqueteevento',
  abono: 'abono',
  empleados: 'empleados',
  gastofijo: 'gastofijo',
  gastoseventos: 'gastoseventos',
  mes: 'mes',
  pagos: 'pagos',
  rol: 'rol',
  servicios: 'servicios',
  servicioseventos: 'servicioseventos'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
